[
  {
    "id": 1480099762,
    "question_id": 101,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 1 week",
    "timestamp": 1734341306,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/1480099762/",
    "is_pending": "Not Pending",
    "title": "Symmetric Tree",
    "memory": "17.2 MB",
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        def dfs(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return (left.val == right.val and\n                    dfs(left.left, right.right) and\n                    dfs(left.right, right.left))\n\n        return dfs(root, root) if root else True",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "symmetric-tree",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2672
  },
  {
    "id": 1480098841,
    "question_id": 112,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 1 week",
    "timestamp": 1734341223,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/1480098841/",
    "is_pending": "Not Pending",
    "title": "Path Sum",
    "memory": "18.6 MB",
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: TreeNode, targetSum: int) -> bool:\n        def dfs(node, currentSum):\n            if not node:\n                return False\n            currentSum += node.val  # Add current node's value\n            \n            # Check if it's a leaf node and sum matches\n            if not node.left and not node.right:\n                return currentSum == targetSum\n            \n            # Continue DFS on children\n            for child in (node.left, node.right):\n                if dfs(child, currentSum):\n                    return True\n            return False\n\n        return dfs(root, 0)",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "path-sum",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2671
  },
  {
    "id": 1480096277,
    "question_id": 144,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 1 week",
    "timestamp": 1734341005,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/1480096277/",
    "is_pending": "Not Pending",
    "title": "Binary Tree Preorder Traversal",
    "memory": "17.4 MB",
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n        \nclass Solution:\n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        result = []\n        \n        def dfs(node):\n            if not node:\n                return\n            result.append(node.val)  # Process current node\n            for child in (node.left, node.right):\n                dfs(child)  # Traverse children\n\n        dfs(root)\n        return result",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "binary-tree-preorder-traversal",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2670
  },
  {
    "id": 1476639148,
    "question_id": 739,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 1 week",
    "timestamp": 1733975193,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "78 ms",
    "url": "/submissions/detail/1476639148/",
    "is_pending": "Not Pending",
    "title": "Daily Temperatures",
    "memory": "26.9 MB",
    "code": "class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        n = len(temperatures)\n        result = [0] * n\n        stack = []\n\n        for i in range(n):\n            while stack and temperatures[stack[-1]] < temperatures[i]:\n                index = stack.pop()\n                result[index] = i - index\n            stack.append(i)\n\n        return result\n",
    "compare_result": "111111111111111111111111111111111111111111111111",
    "title_slug": "daily-temperatures",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2669
  },
  {
    "id": 1475822740,
    "question_id": 208,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 1 week",
    "timestamp": 1733893313,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "51 ms",
    "url": "/submissions/detail/1475822740/",
    "is_pending": "Not Pending",
    "title": "Implement Trie (Prefix Tree)",
    "memory": "32.6 MB",
    "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\n        \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n\n    def _search_prefix(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node\n\n    def startsWith(self, prefix):\n        return bool(self._search_prefix(prefix))\n\n    def search(self, word):\n        node = self._search_prefix(word)\n        return node and node.is_end\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)",
    "compare_result": "1111111111111111",
    "title_slug": "implement-trie-prefix-tree",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2668
  },
  {
    "id": 1475819170,
    "question_id": 209,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 1 week",
    "timestamp": 1733893011,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "14 ms",
    "url": "/submissions/detail/1475819170/",
    "is_pending": "Not Pending",
    "title": "Minimum Size Subarray Sum",
    "memory": "27.9 MB",
    "code": "class Solution:\n    def minSubArrayLen(self, target, nums):\n        res = float('inf')  # Initialize result to infinity\n        left = 0            # Left pointer for the sliding window\n        current_sum = 0     # Current sum of the window\n        \n        for right in range(len(nums)):\n            current_sum += nums[right]  # Expand the window by adding the right element\n            \n            # While the current sum is valid (i.e., greater than or equal to target)\n            while self.valid(current_sum, target):\n                res = min(res, right - left + 1)  # Update the result with the minimal length\n                current_sum -= nums[left]          # Shrink the window from the left\n                left += 1                          # Move the left pointer to the right\n                \n        return 0 if res == float('inf') else res  # Return 0 if no valid subarray found\n\n    def valid(self, current_sum, target):\n        return current_sum >= target  # Check \n",
    "compare_result": "111111111111111111111",
    "title_slug": "minimum-size-subarray-sum",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2667
  },
  {
    "id": 1474887288,
    "question_id": 3,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 2 weeks",
    "timestamp": 1733803283,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "33 ms",
    "url": "/submissions/detail/1474887288/",
    "is_pending": "Not Pending",
    "title": "Longest Substring Without Repeating Characters",
    "memory": "17.5 MB",
    "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        res = 0\n        left = 0\n        state = defaultdict(int)\n        \n        for i in range(len(s)):\n            state[s[i]] += 1\n            \n            # While the current character is repeating in the window\n            while not self.valid(state, s[i]):\n                state[s[left]] -= 1\n                if state[s[left]] == 0:\n                    del state[s[left]]\n                left += 1\n\n            # Update the result with the maximum length found\n            res = max(res, i - left + 1)\n        \n        return res\n\n    def valid(self, state, char):\n        # Check if the current character has more than 1 occurrence\n        return False if state[char] > 1 else True\n\n",
    "compare_result
    "title_slug": "longest-substring-without-repeating-characters",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2666
  },
  {
    "id": 1474883658,
    "question_id": 907,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 2 weeks",
    "timestamp": 1733802934,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "147 ms",
    "url": "/submissions/detail/1474883658/",
    "is_pending": "Not Pending",
    "title": "Koko Eating Bananas",
    "memory": "18.3 MB",
    "code": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        left, right = 1, max(piles)\n        while left < right:\n            mid = left + (right - left) // 2\n            if self.valid(mid, piles, h):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    def valid(self, k, piles, h):\n        hours_needed = 0\n        for pile in piles:\n            hours_needed += (pile + k - 1) // k\n        return hours_needed <= h",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "koko-eating-bananas",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2665
  },
  {
    "id": 1474823161,
    "question_id": 278,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 2 weeks",
    "timestamp": 1733796208,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "24 ms",
    "url": "/submissions/detail/1474823161/",
    "is_pending": "Not Pending",
    "title": "First Bad Version",
    "memory": "17.4 MB",
    "code": "# The isBadVersion API is already defined for you.\n# def isBadVersion(version: int) -> bool:\n\nclass Solution:\n    def firstBadVersion(self, n):\n        left = 0\n        right = n + 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if self.valid(mid):\n                right = mid\n            else:\n                left = mid + 1\n                \n        return left\n\n    def valid(self, mid):\n        return isBadVersion(mid)",
    "compare_result": "111111111111111111111111",
    "title_slug": "first-bad-version",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2664
  },
  {
    "id": 1474819056,
    "question_id": 69,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "6 months, 2 weeks",
    "timestamp": 1733795663,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/1474819056/",
    "is_pending": "Not Pending",
    "title": "Sqrt(x)",
    "memory": "17.3 MB",
    "code": "class Solution:\n    def mySqrt(self, x):\n        left = 1\n        right = x + 1\n        \n        while left < right:\n            mid = left + (right - left) // 2  # Use integer division\n            \n            if self.valid(mid, x):\n                right = mid\n            else:\n                left = mid + 1\n                \n        return left - 1\n\n    def valid(self, mid, x):\n        return mid * mid > x\n",
    "compare_result
    "title_slug": "sqrtx",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2663
  },
  {
    "id": 1377157508,
    "question_id": 204,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "9 months, 3 weeks",
    "timestamp": 1725328025,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/1377157508/",
    "is_pending": "Not Pending",
    "title": "Count Primes",
    "memory": "N/A",
    "code": "class Solution:\n    def countPrimes(self, n):\n        if n < 2:\n            return 0  # There are no prime numbers less than 2\n        primes = [True] * (n + 1)  # Initialize a list of boolean values\n        primes[0] = primes[1] = False  # 0 and 1 are not prime numbers\n\n        for p in range(2, int(n**0.5) + 1):\n            if primes[p]:\n                # Mark all multiples of p as False\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n\n        return sum(primes)\n",
    "compare_result": "111001010110101110011101110110011111011111111111011111111111110111",
    "title_slug": "count-primes",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2662
  },
  {
    "id": 1370930342,
    "question_id": 94,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "9 months, 4 weeks",
    "timestamp": 1724833989,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "34 ms",
    "url": "/submissions/detail/1370930342/",
    "is_pending": "Not Pending",
    "title": "Binary Tree Inorder Traversal",
    "memory": "16.5 MB",
    "code": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        current = root\n        result = []\n\n        while current:\n            if current.left is None:\n                result.append(current.val)\n                current = current.right\n            else:\n                # Find the inorder predecessor of current\n                predecessor = current.left\n                while predecessor.right and predecessor.right != current:\n                    predecessor = predecessor.right\n                \n                # Make current as right child of its predecessor\n                if predecessor.right is None:\n                    predecessor.right = current\n                    current = current.left\n                else:\n                    # Revert the changes made to restore the original tree\n                    predecessor.right = None\n                    result.append(current.val)\n                    current = current.right\n\n        return result\n\n\n        ",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "binary-tree-inorder-traversal",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2661
  },
  {
    "id": 1370920908,
    "question_id": 208,
    "lang": "cpp",
    "lang_name": "C++",
    "time": "9 months, 4 weeks",
    "timestamp": 1724833101,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "35 ms",
    "url": "/submissions/detail/1370920908/",
    "is_pending": "Not Pending",
    "title": "Implement Trie (Prefix Tree)",
    "memory": "48.6 MB",
    "code": "class TrieNode {\npublic:\n    TrieNode* children[26];\n    bool end;\n\n    TrieNode() {\n        for (int i = 0; i < 26; i++) {\n            children[i] = nullptr;\n        }\n        end = false;\n    }\n};\n\nclass Trie {\nprivate:\n    TrieNode* root;\n\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const std::string& word) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            int index = ch - 'a';\n            if (node->children[index] == nullptr) {\n                node->children[index] = new TrieNode();\n            }\n            node = node->children[index];\n        }\n        node->end = true;\n    }\n\n    TrieNode* searchPrefix(const std::string& prefix) {\n        TrieNode* node = root;\n        for (char ch : prefix) {\n            int index = ch - 'a';\n            if (node->children[index] == nullptr) {\n                return nullptr;\n            }\n            node = node->children[index];\n        }\n        return node;\n    }\n\n    bool search(const std::string& word) {\n        TrieNode* node = searchPrefix(word);\n        return node != nullptr && node->end;\n    }\n\n    bool startsWith(const std::string& prefix) {\n        return searchPrefix(prefix) != nullptr;\n    }\n};",
    "compare_result": "1111111111111111",
    "title_slug": "implement-trie-prefix-tree",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2660
  },
  {
    "id": 1370919854,
    "question_id": 208,
    "lang": "java",
    "lang_name": "Java",
    "time": "9 months, 4 weeks",
    "timestamp": 1724833002,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "32 ms",
    "url": "/submissions/detail/1370919854/",
    "is_pending": "Not Pending",
    "title": "Implement Trie (Prefix Tree)",
    "memory": "55.3 MB",
    "code": "class TrieNode {\n    TrieNode[] children;\n    boolean end;\n\n    public TrieNode() {\n        children = new TrieNode[26];\n        end = false;\n    }\n}\n\nclass Trie {\n    private TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            int index = ch - 'a';\n            if (node.children[index] == null) {\n                node.children[index] = new TrieNode();\n            }\n            node = node.children[index];\n        }\n        node.end = true;\n    }\n\n    private TrieNode searchPrefix(String prefix) {\n        TrieNode node = root;\n        for (char ch : prefix.toCharArray()) {\n            int index = ch - 'a';\n            if (node.children[index] == null) {\n                return null;\n            }\n            node = node.children[index];\n        }\n        return node;\n    }\n\n    public boolean search(String word) {\n        TrieNode node = searchPrefix(word);\n        return node != null && node.end;\n    }\n\n    public boolean startsWith(String prefix) {\n        return searchPrefix(prefix) != null;\n    }\n}",
    "compare_result": "1111111111111111",
    "title_slug": "implement-trie-prefix-tree",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2659
  },
  {
    "id": 1370919092,
    "question_id": 208,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "9 months, 4 weeks",
    "timestamp": 1724832934,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "144 ms",
    "url": "/submissions/detail/1370919092/",
    "is_pending": "Not Pending",
    "title": "Implement Trie (Prefix Tree)",
    "memory": "34 MB",
    "code": "class Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.end = False\n\n    def insert(self, word):\n        node = self\n        for ch in word:\n            ch = ord(ch) - ord(\"a\")\n            if not node.children[ch]:\n                node.children[ch] = Trie()\n            node = node.children[ch]\n        node.end = True\n\n    def _search_prefix(self, prefix):\n        node = self\n        for ch in prefix:\n            ch = ord(ch) - ord(\"a\")\n            if not node.children[ch]:\n                return\n            node = node.children[ch]\n        return node\n\n    def search(self, word):\n        node = self._search_prefix(word)\n        return node and node.end\n\n    def startsWith(self, prefix):\n        return bool(self._search_prefix(prefix))",
    "compare_result": "1111111111111111",
    "title_slug": "implement-trie-prefix-tree",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2658
  },
  {
    "id": 1020701667,
    "question_id": 394,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "1 year, 10 months",
    "timestamp": 1691981184,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "37 ms",
    "url": "/submissions/detail/1020701667/",
    "is_pending": "Not Pending",
    "title": "Decode String",
    "memory": "16.4 MB",
    "code": "class Solution:\n    def decodeString(self, s: str) -> str:\n        def decodeRe(s):\n            nonlocal cur\n            content = []\n            num = 0\n            while cur <= len(s) - 1 and s[cur] != ']':\n                if s[cur].isdigit():\n                    num = num * 10 + int(s[cur])\n                elif s[cur] == '[':\n                    cur += 1\n                    content.append(num * decodeRe(s))\n                    num = 0\n                elif s[cur].isalpha():\n                    content.append(s[cur])\n                cur += 1\n            return ''.join(content)\n        cur = 0\n        return decodeRe(s)",
    "compare_result": "1111111111111111111111111111111111",
    "title_slug": "decode-string",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2657
  },
  {
    "id": 854920362,
    "question_id": 2583,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "2 years, 6 months",
    "timestamp": 1670229417,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "8013 ms",
    "url": "/submissions/detail/854920362/",
    "is_pending": "Not Pending",
    "title": "Divide Nodes Into the Maximum Number of Groups",
    "memory": "18.1 MB",
    "code": "class Solution:\n    def magnificentSets(self, n, edges):\n        def build_graph(edges):\n            graph = collections.defaultdict(list)\n            for edge in edges:\n                graph[edge[0]].append(edge[1])\n                graph[edge[1]].append(edge[0])\n            return graph\n\n        def dfs(node, graph, groups):\n            nonlocal visited\n            groups[-1].append(node)\n            visited.add(node)\n            for n in graph[node]:\n                if n not in visited:\n                    dfs(n, graph, groups)\n\n        def cal(group, graph):\n            res = 1\n            for g in group:\n                dis = collections.defaultdict(int)\n                level = 1\n                dis[g] = level\n                queue = [g]\n                visited = set([g])\n                while queue:\n                    level += 1\n                    next_queue = []\n                    for i in range(len(queue)):\n                        for e in graph[queue[i]]:\n                            if e not in visited:\n                                dis[e] = level\n                                res = max(res, dis[e])\n                                visited.add(e)\n                                next_queue.append(e)\n                    queue = next_queue\n                for i in range(1, n+1):\n                    if i in dis:\n                        for v in graph[i]:\n                            if abs(dis[v] - dis[i]) != 1:\n                                res = -1\n            return res\n\n        groups = []\n        res = 0\n        visited = set()\n        graph = build_graph(edges)\n        for i in range(1, n+1):\n            if i not in visited:\n                groups.append([])\n                dfs(i, graph, groups)\n\n        for group in groups:\n            cur = cal(group, graph)\n            if cur == -1:\n                return -1\n            res += cur\n        return res",
    "compare_result": "1111111111111111111111111111111111111111111111111111",
    "title_slug": "divide-nodes-into-the-maximum-number-of-groups",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2656
  },
  {
    "id": 854917223,
    "question_id": 2583,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "2 years, 6 months",
    "timestamp": 1670228918,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/854917223/",
    "is_pending": "Not Pending",
    "title": "Divide Nodes Into the Maximum Number of Groups",
    "memory": "N/A",
    "code": "class Solution:\n    def magnificentSets(self, n, edges):\n        def build_graph(edges):\n            graph = collections.defaultdict(list)\n            for edge in edges:\n                graph[edge[0]].append(edge[1])\n                graph[edge[1]].append(edge[0])\n            return graph\n\n        def dfs(node, graph, groups):\n            nonlocal visited\n            groups[-1].append(node)\n            visited.add(node)\n            for n in graph[node]:\n                if n not in visited:\n                    dfs(n, graph, groups)\n\n        def cal(group, graph):\n            res = -1\n            for g in group:\n                dis = collections.defaultdict(int)\n                level = 1\n                dis[g] = level\n                queue = [g]\n                visited = set([g])\n                while queue:\n                    level += 1\n                    next_queue = []\n                    for i in range(len(queue)):\n                        for e in graph[queue[i]]:\n                            if e not in visited:\n                                dis[e] = level\n                                res = max(res, dis[e])\n                                visited.add(e)\n                                next_queue.append(e)\n                    queue = next_queue\n                for edge in edges:\n                    if abs(dis[edge[0]] - dis[edge[1]]) != 1:\n                        res = -1\n            return res\n\n        groups = []\n        res = 0\n        visited = set()\n        graph = build_graph(edges)\n        for i in range(1, n+1):\n            if i not in visited:\n                groups.append([])\n                dfs(i, graph, groups)\n\n        for group in groups:\n            cur = cal(group, graph)\n            if cur == -1:\n                return -1\n            res += cur\n        return res",
    "compare_result": "1101001111111100100110011111110000000000000000000000",
    "title_slug": "divide-nodes-into-the-maximum-number-of-groups",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2655
  },
  {
    "id": 854247412,
    "question_id": 2582,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "2 years, 6 months",
    "timestamp": 1670127044,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "1814 ms",
    "url": "/submissions/detail/854247412/",
    "is_pending": "Not Pending",
    "title": "Minimum Score of a Path Between Two Cities",
    "memory": "68.2 MB",
    "code": "class Solution:\n    def minScore(self, n: int, roads: List[List[int]]) -> int:\n        def dfs(cur):\n            nonlocal res\n            for v, w in graph[cur]:\n                if (cur, v) not in visited and (v, cur) not in visited:\n                    visited.add((cur, v))\n                    res = min(res, w)\n                    if dfs(v) == 1:\n                        break\n            return res\n                    \n        res = float('inf')\n        visited = set()\n        graph = collections.defaultdict(list)\n        for road in roads:\n            graph[road[0]].append((road[1], road[2]))\n            graph[road[1]].append((road[0], road[2]))\n        return dfs(1)",
    "compare_result": "111111111111111111111111111111111111",
    "title_slug": "minimum-score-of-a-path-between-two-cities",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2654
  },
  {
    "id": 852217425,
    "question_id": 739,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "2 years, 6 months",
    "timestamp": 1669798721,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "3529 ms",
    "url": "/submissions/detail/852217425/",
    "is_pending": "Not Pending",
    "title": "Daily Temperatures",
    "memory": "28.4 MB",
    "code": "class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:\n        res = [0] * len(temperatures)\n        stack = []\n        for i in range(len(temperatures)):\n            while stack and temperatures[stack[-1]] < temperatures[i]:\n                top = stack.pop()\n                res[top] = i - top\n            stack.append(i)\n        return res",
    "compare_result": "111111111111111111111111111111111111111111111111",
    "title_slug": "daily-temperatures",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2653
  },
  {
    "id": 852098044,
    "question_id": 3,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "2 years, 6 months",
    "timestamp": 1669781363,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "207 ms",
    "url": "/submissions/detail/852098044/",
    "is_pending": "Not Pending",
    "title": "Longest Substring Without Repeating Characters",
    "memory": "14 MB",
    "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        left = res = 0\n        count = collections.defaultdict(int)\n        for right in range(len(s)):\n            count[s[right]] += 1\n            while count[s[right]] > 1:\n                count[s[left]] -= 1\n                left += 1\n            res = max(res, right - left + 1)\n        return res",
    "compare_result
    "title_slug": "longest-substring-without-repeating-characters",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2652
  },
  {
    "id": 851798221,
    "question_id": 69,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "2 years, 6 months",
    "timestamp": 1669735491,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/851798221/",
    "is_pending": "Not Pending",
    "title": "Sqrt(x)",
    "memory": "N/A",
    "code": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        def valid(mid, x):\n            if mid**2 > x:\n                return True\n            return False\n        left = 1\n        right = x\n        while left < right:\n            mid = (left + right) // 2\n            if valid(mid, x):\n                right = mid\n            else:\n                left = mid + 1\n        return left - 1",
    "compare_result
    "title_slug": "sqrtx",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2651
  },
  {
    "id": 851795584,
    "question_id": 69,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "2 years, 6 months",
    "timestamp": 1669735146,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "87 ms",
    "url": "/submissions/detail/851795584/",
    "is_pending": "Not Pending",
    "title": "Sqrt(x)",
    "memory": "13.8 MB",
    "code": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        def valid(mid, x):\n            if mid**2 > x:\n                return True\n            return False\n        left = 1\n        right = x + 1\n        while left < right:\n            mid = (left + right) // 2\n            if valid(mid, x):\n                right = mid\n            else:\n                left = mid + 1\n        return left - 1",
    "compare_result
    "title_slug": "sqrtx",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2650
  },
  {
    "id": 668328343,
    "question_id": 1355,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 2 months",
    "timestamp": 1648391041,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "1787 ms",
    "url": "/submissions/detail/668328343/",
    "is_pending": "Not Pending",
    "title": "Minimum Deletions to Make Array Beautiful",
    "memory": "28.2 MB",
    "code": "class Solution:\n    def minDeletion(self, nums):\n        if len(nums) < 2:\n            return len(nums)\n        deleted = 0\n        l, r = 0, 1\n        while l < len(nums)-1:\n            if (l - deleted) % 2 == 0:\n                while r < len(nums) and nums[l] == nums[r]:\n                    deleted += 1\n                    r += 1\n            l = r + 1\n            r = l + 1\n        if (len(nums) - deleted) % 2 == 1:\n            return deleted + 1\n        return deleted",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "minimum-deletions-to-make-array-beautiful",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2649
  },
  {
    "id": 668327571,
    "question_id": 1355,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 2 months",
    "timestamp": 1648390946,
    "status": 15,
    "status_display": "Runtime Error",
    "runtime": "N/A",
    "url": "/submissions/detail/668327571/",
    "is_pending": "Not Pending",
    "title": "Minimum Deletions to Make Array Beautiful",
    "memory": "N/A",
    "code": "class Solution:\n    def minDeletion(self, nums):\n        if len(nums) < 2:\n            return len(nums)\n        deleted = 0\n        l, r = 0, 1\n        while l < len(nums)-1:\n            if (l - deleted) % 2 == 0:\n                while nums[l] == nums[r]:\n                    deleted += 1\n                    r += 1\n            l = r + 1\n            r = l + 1\n        if (len(nums) - deleted) % 2 == 1:\n            return deleted + 1\n        return deleted",
    "compare_result": "111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000",
    "title_slug": "minimum-deletions-to-make-array-beautiful",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2648
  },
  {
    "id": 668319271,
    "question_id": 1355,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 2 months",
    "timestamp": 1648389912,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/668319271/",
    "is_pending": "Not Pending",
    "title": "Minimum Deletions to Make Array Beautiful",
    "memory": "N/A",
    "code": "class Solution:\n    def minDeletion(self, nums: List[int]) -> int:\n        deleted = 0\n        i = 0 \n        while i < len(nums) - 1:\n            if (i - deleted) % 2 == 0:\n                if nums[i-deleted] == nums[i-deleted+1]:\n                    i += 1\n                    deleted += 1\n            i += 1\n        if (len(nums) - deleted) % 2 == 1:\n            return deleted + 1\n        return deleted",
    "compare_result": "111111111111111111111111111111111101111111111111110101111101010101010101111111001111110110111010111010000110000000",
    "title_slug": "minimum-deletions-to-make-array-beautiful",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2647
  },
  {
    "id": 668318960,
    "question_id": 1355,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 2 months",
    "timestamp": 1648389875,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/668318960/",
    "is_pending": "Not Pending",
    "title": "Minimum Deletions to Make Array Beautiful",
    "memory": "N/A",
    "code": "class Solution:\n    def minDeletion(self, nums: List[int]) -> int:\n        deleted = 0\n        i = 0 \n        while i < len(nums) - 1:\n            if (i - deleted) % 2 == 0:\n                if nums[i-deleted] == nums[i-deleted+1]:\n                    i += 1\n                    deleted += 1\n            i += 1\n        if len(nums) - deleted % 2 == 1:\n            return deleted + 1\n        return deleted",
    "compare_result": "111111001100110011000100110001001100011011101110110101011101010101010101111111000100100100011000101000000100000000",
    "title_slug": "minimum-deletions-to-make-array-beautiful",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2646
  },
  {
    "id": 653031047,
    "question_id": 3,
    "lang": "java",
    "lang_name": "Java",
    "time": "3 years, 3 months",
    "timestamp": 1646371693,
    "status": 20,
    "status_display": "Compile Error",
    "runtime": "N/A",
    "url": "/submissions/detail/653031047/",
    "is_pending": "Not Pending",
    "title": "Longest Substring Without Repeating Characters",
    "memory": "N/A",
    "code": "class Solution {\n        Map<Character, Integer> state = new HashMap<Character, Integer>();\n        public int lengthOfLongestSubstring(String s) {\n            int res = 0;\n            int left = 0;\n            for (int i = 0; i < s.length(); i++) {\n                char c = strings.charAt(i);\n                state.put(c, state.getOrDefault(c, 0) + 1);\n                while(!isValid(state.get(c))) {\n                    state.put(c, state.get(left) - 1);\n                    if (state.get(left) == 0)\n                        state.remove(left);\n                    left++;\n                }\n                res = Math.max(res, i - left + 1);\n            }\n            return res;\n        }\n\n        private boolean isValid(Integer cnt) {\n            if (cnt > 1) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    }",
    "compare_result": null,
    "title_slug": "longest-substring-without-repeating-characters",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2645
  },
  {
    "id": 653029587,
    "question_id": 3,
    "lang": "java",
    "lang_name": "Java",
    "time": "3 years, 3 months",
    "timestamp": 1646371543,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/653029587/",
    "is_pending": "Not Pending",
    "title": "Longest Substring Without Repeating Characters",
    "memory": "N/A",
    "code": "class Solution {\n    Map<Character, Integer> state = new HashMap<Character, Integer>();\n    public int lengthOfLongestSubstring(String s) {\n        String strings = s;\n        int res = 0;\n        int left = 0;\n        for (int i = 0; i < strings.length(); i++) {\n            char c = strings.charAt(i);\n            state.put(c, state.getOrDefault(c, 0) + 1);\n            while(!isValid(state.get(c))) {\n                state.put(c, state.get(c) - 1);\n                if (state.get(c) == 0)\n                    state.remove(c);\n                left++;\n            }\n            res = Math.max(res, i - left + 1);\n        }\n        return res;\n    }\n\n    private boolean isValid(Integer cnt) {\n        if (cnt > 1) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}",
    "compare_result
    "title_slug": "longest-substring-without-repeating-characters",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2644
  },
  {
    "id": 653024835,
    "question_id": 3,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 3 months",
    "timestamp": 1646371026,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "91 ms",
    "url": "/submissions/detail/653024835/",
    "is_pending": "Not Pending",
    "title": "Longest Substring Without Repeating Characters",
    "memory": "14 MB",
    "code": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        def is_valid(cnt):\n            if cnt > 1:\n                return False\n            return True\n        strings = s\n        res = 0\n        left = 0\n        state = collections.defaultdict(int)\n        for i in range(len(strings)):\n            state[strings[i]] += 1\n            while not is_valid(state[strings[i]]):\n                state[strings[left]] -= 1\n                if state[strings[left]] == 0:\n                    del state[strings[left]]\n                left += 1\n            res = max(res, i - left + 1)\n        return res",
    "compare_result
    "title_slug": "longest-substring-without-repeating-characters",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2643
  },
  {
    "id": 601184084,
    "question_id": 943,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 6 months",
    "timestamp": 1639391583,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "500 ms",
    "url": "/submissions/detail/601184084/",
    "is_pending": "Not Pending",
    "title": "Sum of Subarray Minimums",
    "memory": "18.2 MB",
    "code": "class Solution:\n    def sumSubarrayMins(self, arr):\n        left = [-1] * len(arr)\n        right = [len(arr)] * len(arr)\n        stack = []\n        res = 0\n        \n        for i in range(len(arr)):\n            while stack and arr[stack[-1]] > arr[i]:\n                top = stack.pop()\n                right[top] = i\n            if stack:\n                left[i] = stack[-1]\n            stack.append(i)\n        \n        for i in range(len(arr)):\n            res += arr[i] * (i - left[i]) * (right[i] - i)\n        return res % (10**9 + 7)",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "sum-of-subarray-minimums",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2642
  },
  {
    "id": 588472162,
    "question_id": 2198,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 7 months",
    "timestamp": 1637132748,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "9112 ms",
    "url": "/submissions/detail/588472162/",
    "is_pending": "Not Pending",
    "title": "Process Restricted Friend Requests",
    "memory": "14.8 MB",
    "code": "class UF:\n    def __init__(self, n):\n        self.parent = [i for i in range(n)]\n        self.rank = [0] * n\n    \n    def union(self, a, b):\n        pa = self.find(a)\n        pb = self.find(b)\n        if pa != pb:\n            if self.rank[pa] > self.rank[pb]:\n                self.parent[pb] = pa\n            else:\n                self.parent[pa] = pb\n                if self.rank[pa] == self.rank[pb]:\n                    self.rank[pb] += 1\n    \n    def find(self, a):\n        if self.parent[a] != a:\n            self.parent[a] = self.find(self.parent[a])\n        return self.parent[a]\n\nclass Solution:\n    def friendRequests(self, n: int, restrictions, requests):\n        uf = UF(n)\n        res = []\n        for r in requests:\n            valid = True\n            first = uf.find(r[0])\n            second = uf.find(r[1])\n            for rest in restrictions:\n                third = uf.find(rest[0])\n                forth = uf.find(rest[1])\n                if set([first, second]) == set([third, forth]):\n                    valid = False\n                    break\n            res.append(valid)\n            if valid:\n                uf.union(first, second)\n        return res",
    "compare_result": "1111111111111111111111111111111111111111111111111",
    "title_slug": "process-restricted-friend-requests",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2641
  },
  {
    "id": 587847316,
    "question_id": 2195,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 7 months",
    "timestamp": 1637032003,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "36 ms",
    "url": "/submissions/detail/587847316/",
    "is_pending": "Not Pending",
    "title": "Time Needed to Buy Tickets",
    "memory": "14.3 MB",
    "code": "class Solution:\n    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:\n        res = 0\n        for i in range(len(tickets)):\n            if i <= k:\n                res += min(tickets[i], tickets[k])\n            else:\n                res += min(tickets[k]-1, tickets[i])\n        return res",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "time-needed-to-buy-tickets",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2640
  },
  {
    "id": 584943660,
    "question_id": 2186,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 7 months",
    "timestamp": 1636533978,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "36 ms",
    "url": "/submissions/detail/584943660/",
    "is_pending": "Not Pending",
    "title": "Count Vowel Substrings of a String",
    "memory": "14.1 MB",
    "code": "class Solution:\n    def countVowelSubstrings(self, word: str) -> int:\n        def asMost(k, word):\n            res = 0\n            left = 0\n            seen = collections.defaultdict(int)\n            last = 0\n            for i in range(len(word)):\n                if word[i] not in 'aeiou':\n                    left = i + 1\n                    seen = collections.defaultdict(int)\n                    continue\n                seen[word[i]] += 1\n                if len(seen) > k:\n                    while len(seen) > k:\n                        seen[word[left]] -= 1\n                        if seen[word[left]] == 0:\n                            del seen[word[left]]\n                        left += 1\n                res += i - left + 1\n            return res\n        return asMost(5, word) - asMost(4, word)",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "count-vowel-substrings-of-a-string",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2639
  },
  {
    "id": 580932657,
    "question_id": 2184,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 7 months",
    "timestamp": 1635850136,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "960 ms",
    "url": "/submissions/detail/580932657/",
    "is_pending": "Not Pending",
    "title": "Check if an Original String Exists Given Two Encoded Strings",
    "memory": "118.2 MB",
    "code": "class Solution:\n    def possiblyEquals(self, s1: str, s2: str) -> bool:\n        \n        @lru_cache(None)\n        def dfs(i, j, diff):\n            if i == len(s1) and j == len(s2):\n                return diff == 0\n\n            if i < len(s1) and s1[i].isdigit():\n                last = 0\n                while i < len(s1) and s1[i].isdigit():\n                    last = last * 10 + int(s1[i])\n                    if dfs(i+1, j, diff + last):\n                        return True\n                    i += 1\n                return False\n                return res\n            if j < len(s2) and s2[j].isdigit():\n                last = 0\n                while j < len(s2) and s2[j].isdigit():\n                    last = last * 10 + int(s2[j])\n                    if dfs(i, j+1, diff - last):\n                        return True\n                    j += 1\n                return False\n                return res\n            if diff > 0:\n                return j < len(s2) and dfs(i, j+1, diff-1)\n            if diff < 0:\n                return i < len(s1) and dfs(i+1, j, diff+1)\n            if i < len(s1) and j < len(s2) and s1[i] == s2[j]:\n                return dfs(i+1, j+1, diff)\n            return False\n        \n        return dfs(0, 0, 0)",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "check-if-an-original-string-exists-given-two-encoded-strings",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2638
  },
  {
    "id": 580932239,
    "question_id": 2184,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 7 months",
    "timestamp": 1635850022,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "3728 ms",
    "url": "/submissions/detail/580932239/",
    "is_pending": "Not Pending",
    "title": "Check if an Original String Exists Given Two Encoded Strings",
    "memory": "434.2 MB",
    "code": "class Solution:\n    def possiblyEquals(self, s1: str, s2: str) -> bool:\n        \n        @lru_cache(None)\n        def dfs(i, j, diff):\n            if i == len(s1) and j == len(s2):\n                return diff == 0\n\n            if i < len(s1) and s1[i].isdigit():\n                res = False\n                last = 0\n                while i < len(s1) and s1[i].isdigit():\n                    last = last * 10 + int(s1[i])\n                    res |= dfs(i+1, j, diff + last)\n                    i += 1\n                return res\n            if j < len(s2) and s2[j].isdigit():\n                res = False\n                last = 0\n                while j < len(s2) and s2[j].isdigit():\n                    last = last * 10 + int(s2[j])\n                    res |= dfs(i, j+1, diff - last)\n                    j += 1\n                return res\n            if diff > 0:\n                return j < len(s2) and dfs(i, j+1, diff-1)\n            if diff < 0:\n                return i < len(s1) and dfs(i+1, j, diff+1)\n            if i < len(s1) and j < len(s2) and s1[i] == s2[j]:\n                return dfs(i+1, j+1, diff)\n            return False\n        \n        return dfs(0, 0, 0)",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "check-if-an-original-string-exists-given-two-encoded-strings",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2637
  },
  {
    "id": 572464344,
    "question_id": 2171,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 8 months",
    "timestamp": 1634443706,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/572464344/",
    "is_pending": "Not Pending",
    "title": "Second Minimum Time to Reach Destination",
    "memory": "N/A",
    "code": "class Solution:\n    def secondMinimum(self, n: int, edges, time: int, change: int) -> int:\n        def buildGraph(edges):\n            graph = collections.defaultdict(list)\n            for e in edges:\n                graph[e[0]].append(e[1])\n                graph[e[1]].append(e[0])\n            return graph\n        \n        graph = buildGraph(edges)\n        heap = [(0, 1)]\n        first = None\n        visited = collections.defaultdict(int)\n        while heap:\n            t, node = heapq.heappop(heap)\n            visited[node] += 1\n            if node == n:\n                if not first:\n                    first = t\n                elif t > first:\n                    return t\n            if visited[node] > 2:\n                continue\n            for e in graph[node]:\n                if (t // change) % 2 == 0:\n                    heapq.heappush(heap, (t + time, e))\n                else:\n                    need = change - t % change\n                    heapq.heappush(heap, (t + time + need, e))\n        return -1",
    "compare_result": "111111111111111111111111111111111111111011111111111111111",
    "title_slug": "second-minimum-time-to-reach-destination",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2636
  },
  {
    "id": 568247115,
    "question_id": 670,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 8 months",
    "timestamp": 1633773752,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "32 ms",
    "url": "/submissions/detail/568247115/",
    "is_pending": "Not Pending",
    "title": "Maximum Swap",
    "memory": "14.3 MB",
    "code": "class Solution:\n    def maximumSwap(self, num: int) -> int:\n        num_lst = list(str(num))\n        cur_max = len(num_lst)-1\n        res = num_lst   \n        for i in range(len(num_lst)-2, -1, -1):\n            if num_lst[i] > num_lst[cur_max]:\n                cur_max = i\n            if num_lst[cur_max] > num_lst[i]:\n                res = num_lst[:]\n                res[cur_max], res[i] = res[i], res[cur_max]\n        return int(''.join(res))",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "maximum-swap",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2635
  },
  {
    "id": 564975669,
    "question_id": 2156,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "3 years, 8 months",
    "timestamp": 1633249666,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/564975669/",
    "is_pending": "Not Pending",
    "title": "Stone Game IX",
    "memory": "N/A",
    "code": "class Solution:\n    def stoneGameIX(self, stones):\n        dic = collections.defaultdict(int)\n        for i in range(len(stones)):\n            dic[stones[i] % 3] += 1\n        res = None\n        if dic[1] == dic[2]:\n            res = True\n        else:\n            res = False\n        if dic[0] % 2 == 0:\n            return res\n        return not res",
    "compare_result": "111110001001100000001000101100101011110010110111110001000011111010011111100000101000101101111",
    "title_slug": "stone-game-ix",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2634
  },
  {
    "id": 485664451,
    "question_id": 18,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 1 month",
    "timestamp": 1619490835,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "148 ms",
    "url": "/submissions/detail/485664451/",
    "is_pending": "Not Pending",
    "title": "4Sum",
    "memory": "18.5 MB",
    "code": "class Solution:\n    def fourSum(self, nums, target: int):\n        nums.sort()\n        dic = collections.defaultdict(list)\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                dic[nums[i]+nums[j]].append((i, j))\n        res = []\n        visited = set()\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                cur = nums[i] + nums[j]\n                if target - cur in dic:\n                    for s in dic[target-cur]:\n                        if set(s) & set([i, j]):\n                            continue\n                        new_set = sorted([s[0], s[1], i, j])\n                        tem = [nums[k] for k in new_set]\n                        if tuple(tem) not in visited:\n                            visited.add(tuple(tem))\n                            res.append(tem)\n        return res",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "4sum",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2633
  },
  {
    "id": 470017415,
    "question_id": 819,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 3 months",
    "timestamp": 1616215165,
    "status": 14,
    "status_display": "Time Limit Exceeded",
    "runtime": "N/A",
    "url": "/submissions/detail/470017415/",
    "is_pending": "Not Pending",
    "title": "Minimum Swaps To Make Sequences Increasing",
    "memory": "N/A",
    "code": "class Solution:\n    def minSwap(self, A, B):\n        @lru_cache(None)\n        def dfs(a, b, i, j, step):\n            if i == j == len(A):\n                return step\n            res = len(A)\n            if A[i] > a and B[j] > b:\n                res = min(res, dfs(A[i], B[j], i+1, j+1, step))\n            if A[i] > b and B[j] > a:\n                res = min(res, dfs(B[j], A[i], i+1, j+1, step+1))\n            return res\n        return min(dfs(A[0], B[0], 1, 1, 0), dfs(B[0], A[0], 1, 1, 1))",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000",
    "title_slug": "minimum-swaps-to-make-sequences-increasing",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2632
  },
  {
    "id": 470017301,
    "question_id": 819,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 3 months",
    "timestamp": 1616215131,
    "status": 14,
    "status_display": "Time Limit Exceeded",
    "runtime": "N/A",
    "url": "/submissions/detail/470017301/",
    "is_pending": "Not Pending",
    "title": "Minimum Swaps To Make Sequences Increasing",
    "memory": "N/A",
    "code": "class Solution:\n    def minSwap(self, A, B):\n\n        def dfs(a, b, i, j, step):\n            if i == j == len(A):\n                return step\n            res = len(A)\n            if A[i] > a and B[j] > b:\n                res = min(res, dfs(A[i], B[j], i+1, j+1, step))\n            if A[i] > b and B[j] > a:\n                res = min(res, dfs(B[j], A[i], i+1, j+1, step+1))\n            return res\n        return min(dfs(A[0], B[0], 1, 1, 0), dfs(B[0], A[0], 1, 1, 1))",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000",
    "title_slug": "minimum-swaps-to-make-sequences-increasing",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2631
  },
  {
    "id": 470015834,
    "question_id": 819,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 3 months",
    "timestamp": 1616214756,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/470015834/",
    "is_pending": "Not Pending",
    "title": "Minimum Swaps To Make Sequences Increasing",
    "memory": "N/A",
    "code": "class Solution:\n    def minSwap(self, A: List[int], B: List[int]) -> int:\n        \n        def dfs(a, b, i, j, step):\n            if i == j == len(A):\n                return step\n            res = len(A)\n            if A[i] > a and B[j] > b:\n                res = min(res, dfs(A[i], B[j], i+1, j+1, step))\n            elif A[i] > b and B[j] > a:\n                res = min(res, dfs(B[j], A[i], i+1, j+1, step+1))\n            return res\n        return min(dfs(A[0], B[0], 1, 1, 0), dfs(B[0], A[0], 1, 1, 1))",
    "compare_result": "111101101011111111111111111111111111111111111110110011111101111110001100110011101111010000010011101001",
    "title_slug": "minimum-swaps-to-make-sequences-increasing",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2630
  },
  {
    "id": 467540512,
    "question_id": 1913,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 3 months",
    "timestamp": 1615700388,
    "status": 14,
    "status_display": "Time Limit Exceeded",
    "runtime": "N/A",
    "url": "/submissions/detail/467540512/",
    "is_pending": "Not Pending",
    "title": "Make the XOR of All Segments Equal to Zero",
    "memory": "N/A",
    "code": "import collections\nfrom functools import lru_cache\n\nclass Solution:\n    def minChanges(self, nums, k: int) -> int:\n        def cost(i, j):\n            return size[i] - freq[i][j]\n\n        if k == 1:\n            c = collections.Counter(nums)\n            return len(nums) - c[0]\n\n        freq = [dict() for i in range(k)]\n        size = [0] * k\n        change = float('inf')\n        cur = 0\n        for i in range(len(nums)):\n            if nums[i] not in freq[i%k]:\n                freq[i%k][nums[i]] = 1\n            else:\n                freq[i%k][nums[i]] += 1\n            size[i%k] += 1\n        dp = [[float('inf')] * 1024 for i in range(k+1)]\n        dp[0][0] = 0\n        cur_min = float('inf')\n        for i in range(1, k+1):\n            cur_min = min(dp[i-1]) + size[i-1]\n            for j in range(1024):\n                for x, y in freq[i-1].items():\n                    dp[i][j] = min(dp[i][j], cost(i-1, x) + dp[i-1][x^j], cur_min)\n        return dp[-1][0]",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111100000",
    "title_slug": "make-the-xor-of-all-segments-equal-to-zero",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2629
  },
  {
    "id": 465960671,
    "question_id": 1913,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 3 months",
    "timestamp": 1615367792,
    "status": 14,
    "status_display": "Time Limit Exceeded",
    "runtime": "N/A",
    "url": "/submissions/detail/465960671/",
    "is_pending": "Not Pending",
    "title": "Make the XOR of All Segments Equal to Zero",
    "memory": "N/A",
    "code": "import collections\nfrom functools import lru_cache\n\nclass Solution:\n    def minChanges(self, nums, k: int) -> int:\n        if k == 1:\n            c = collections.Counter(nums)\n            return len(nums) - c[0]\n\n        def cost(i, j):\n            return size[i] - freq[i][j]\n\n\n        def dfs(i, v):\n            nonlocal pre_min\n            if cache[i][v] != 9999:\n                return cache[i][v]\n            if i == k-1:\n                cache[i][v]= cost(i, v)\n                return cache[i][v]\n            res = float('inf')\n            pre_min = float('inf')\n            for x, y in freq[i].items():\n                cur = dfs(i+1, x^v)\n                if cur > res:\n                    break\n                res = min(res, cost(i, x) + cur)\n            res = min(res, pre_min + size[i])\n            pre_min = res\n            cache[i][v] = res\n            return res\n\n        length, left = divmod(len(nums), k)\n        freq = [collections.defaultdict(int) for i in range(k)]\n        size = [0] * k\n        pre_min = float('inf')\n        cache = [[9999] * 1025 for i in range(k+1)]\n        for i in range(len(nums)):\n            freq[i%k][nums[i]] += 1\n            size[i%k] += 1\n        for i in range(1024):\n            cache[-1][i] = size[0] - freq[0][i]\n            pre_min = min(pre_min, cache[-1][i])\n        return dfs(0, 0)",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111110000",
    "title_slug": "make-the-xor-of-all-segments-equal-to-zero",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2628
  },
  {
    "id": 465959760,
    "question_id": 1913,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 3 months",
    "timestamp": 1615367563,
    "status": 14,
    "status_display": "Time Limit Exceeded",
    "runtime": "N/A",
    "url": "/submissions/detail/465959760/",
    "is_pending": "Not Pending",
    "title": "Make the XOR of All Segments Equal to Zero",
    "memory": "N/A",
    "code": "import collections\nfrom functools import lru_cache\n\nclass Solution:\n    def minChanges(self, nums, k: int) -> int:\n        if k == 1:\n            c = collections.Counter(nums)\n            return len(nums) - c[0]\n\n        def cost(i, j):\n            return size[i] - freq[i][j]\n\n\n        def dfs(i, v):\n            if cache[i][v] != 9999:\n                return cache[i][v]\n            if i == k-1:\n                cache[i][v]= cost(i, v)\n                return cache[i][v]\n            res = float('inf')\n            pre_min = float('inf')\n            for x, y in freq[i].items():\n                cur = dfs(i+1, x^v)\n                if cur > res:\n                    break\n                res = min(res, cost(i, x) + cur)\n            pre_min = min(cache[i+1])\n            res = min(res, pre_min + size[i])\n            cache[i][v] = res\n            return res\n\n        length, left = divmod(len(nums), k)\n        freq = [collections.defaultdict(int) for i in range(k)]\n        size = [0] * k\n        cache = [[9999] * 1025 for i in range(k+1)]\n        for i in range(len(nums)):\n            freq[i%k][nums[i]] += 1\n            size[i%k] += 1\n        for i in range(1024):\n            cache[-1][i] = size[0] - freq[0][i]\n        return dfs(0, 0)",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111100000000000000000",
    "title_slug": "make-the-xor-of-all-segments-equal-to-zero",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2627
  },
  {
    "id": 458815832,
    "question_id": 516,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 4 months",
    "timestamp": 1613914344,
    "status": 14,
    "status_display": "Time Limit Exceeded",
    "runtime": "N/A",
    "url": "/submissions/detail/458815832/",
    "is_pending": "Not Pending",
    "title": "Longest Palindromic Subsequence",
    "memory": "N/A",
    "code": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        dp = [[0] * len(s) for i in range(len(s))]\n        def longestPalindromeSub(l, r):\n            if l > r:\n                return 0\n            if l == r:\n                dp[l][r] = 1\n                return 1\n            else:\n                if s[l] == s[r]:\n                    dp[l][r] = longestPalindromeSub(l+1, r-1) + 2\n                else:\n                    dp[l][r] = max(longestPalindromeSub(l+1, r), longestPalindromeSub(l, r-1))\n            return dp[l][r]\n        return longestPalindromeSub(0, len(s)-1)",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111110000000000000000000000",
    "title_slug": "longest-palindromic-subsequence",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2626
  },
  {
    "id": 430803743,
    "question_id": 300,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 6 months",
    "timestamp": 1608009423,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "68 ms",
    "url": "/submissions/detail/430803743/",
    "is_pending": "Not Pending",
    "title": "Longest Increasing Subsequence",
    "memory": "14.7 MB",
    "code": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        dp = [10**10] * (len(nums) + 1)\n        lens = [0]*len(nums)\n        for i, elem in enumerate(nums): \n            lens[i] = bisect_left(dp, elem) + 1\n            dp[lens[i] - 1] = elem \n        return max(lens)",
    "compare_result": "111111111111111111111111111111111111111111111111111111",
    "title_slug": "longest-increasing-subsequence",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2625
  },
  {
    "id": 413720253,
    "question_id": 1752,
    "lang": "cpp",
    "lang_name": "C++",
    "time": "4 years, 7 months",
    "timestamp": 1603792443,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "44 ms",
    "url": "/submissions/detail/413720253/",
    "is_pending": "Not Pending",
    "title": "Arithmetic Subarrays",
    "memory": "21.3 MB",
    "code": "class Solution {\npublic:\n    vector<bool> checkArithmeticSubarrays(vector<int>& n, vector<int>& l, vector<int>& r) {\n    vector<bool> res;\n    for (auto i = 0; i < l.size(); ++i) {\n        int mn_e = INT_MAX, mx_e = INT_MIN, len = r[i] - l[i] + 1, j = l[i];\n        for (int j = l[i]; j <= r[i]; ++j) {\n            mn_e = min(mn_e, n[j]);\n            mx_e = max(mx_e, n[j]);\n        }\n        if (mx_e == mn_e)\n            res.push_back(true);\n        else if ((mx_e - mn_e) % (len - 1))\n             res.push_back(false);\n        else {\n            vector<bool> diffs(len);\n            int pat = (mx_e - mn_e) / (len - 1);\n            for (; j <= r[i]; ++j) {\n                if ((n[j] - mn_e) % pat || diffs[(n[j] - mn_e) / pat])\n                    break;\n                diffs[(n[j] - mn_e) / pat] = true;\n            }\n            res.push_back(j > r[i]);\n        }\n    }\n    return res;\n}\n};",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "arithmetic-subarrays",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2624
  },
  {
    "id": 410474812,
    "question_id": 126,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 8 months",
    "timestamp": 1603074816,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "480 ms",
    "url": "/submissions/detail/410474812/",
    "is_pending": "Not Pending",
    "title": "Word Ladder II",
    "memory": "16.6 MB",
    "code": "class Solution:\n    def findLadders(self, beginWord, endWord, wordList):\n        wordList = set(wordList)\n        res = []\n        layer = {}\n        layer[beginWord] = [[beginWord]]\n        while layer:\n            newlayer = collections.defaultdict(list)\n            for w in layer:\n                if w == endWord: \n                    res.extend(k for k in layer[w])\n                else:\n                    for i in range(len(w)):\n                        for c in 'abcdefghijklmnopqrstuvwxyz':\n                            neww = w[:i]+c+w[i+1:]\n                            if neww in wordList:\n                                newlayer[neww]+=[j+[neww] for j in layer[w]]\n\n            wordList -= set(newlayer.keys())\n            layer = newlayer\n        return res",
    "compare_result": "111111111111111111111111111111111111111",
    "title_slug": "word-ladder-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2623
  },
  {
    "id": 408596085,
    "question_id": 301,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 8 months",
    "timestamp": 1602669419,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "1052 ms",
    "url": "/submissions/detail/408596085/",
    "is_pending": "Not Pending",
    "title": "Remove Invalid Parentheses",
    "memory": "14.3 MB",
    "code": "class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        if not s:\n            return [\"\"]\n        queue = [s]\n        res = []\n        while queue:\n            tem = []\n            for q in queue:\n                if self.isvalid(q) and q not in res:\n                    res.append(q)\n                if not res:\n                    for i in range(len(q)):\n                        if q[i] in '()' and q[:i] + q[i+1:] not in tem:\n                            tem.append(q[:i] + q[i+1:])\n            queue = tem\n        return res if res else [\"\"]\n    \n    def isvalid(self, string):\n        count = 0\n        for i in range(len(string)):\n            if string[i] == '(':\n                count += 1\n            elif string[i] == ')':\n                count -= 1\n                if count < 0:\n                    return False\n        return count == 0",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "remove-invalid-parentheses",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2622
  },
  {
    "id": 387511834,
    "question_id": 1228,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 9 months",
    "timestamp": 1598605168,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "32 ms",
    "url": "/submissions/detail/387511834/",
    "is_pending": "Not Pending",
    "title": "Minimum Cost Tree From Leaf Values",
    "memory": "13.8 MB",
    "code": "class Solution:\n    def mctFromLeafValues(self, arr):\n        stack = [float('inf')]\n        res = 0\n        arr = arr + [float('inf')]\n        for i in range(len(arr)):\n            while stack and stack[-1] < arr[i]:\n                top = stack.pop()\n                if arr[i] == float('inf') and stack[-1] == float('inf'):\n                    break\n                else:\n                    res += min(stack[-1], arr[i]) * top\n            stack.append(arr[i])\n        return res\n",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "minimum-cost-tree-from-leaf-values",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2621
  },
  {
    "id": 382161281,
    "question_id": 153,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 10 months",
    "timestamp": 1597658985,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/382161281/",
    "is_pending": "Not Pending",
    "title": "Find Minimum in Rotated Sorted Array",
    "memory": "N/A",
    "code": "class Solution:\n    def findMin(self, nums):\n        if not nums:\n            return\n        if len(nums) == 1:\n            return nums[0]\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < nums[mid-1]:\n                return nums[mid]\n            else:\n                if nums[mid] >= nums[0]:\n                    left = mid + 1\n                else:\n                    right = mid",
    "compare_result": "11111011011101111111111101111011101111011111010011111111111001101111110011101011101111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "find-minimum-in-rotated-sorted-array",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2620
  },
  {
    "id": 375278596,
    "question_id": 1659,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 10 months",
    "timestamp": 1596433498,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "984 ms",
    "url": "/submissions/detail/375278596/",
    "is_pending": "Not Pending",
    "title": "Get the Maximum Score",
    "memory": "227.6 MB",
    "code": "from sys import setrecursionlimit\n\nsys.setrecursionlimit(1000000000) \n\nclass Solution:\n    def maxSum(self, nums1, nums2):\n        # [4,5,8,10]\n        # [4,6,8,9]\n        def build(lst):\n            dic = dict()\n            for i in range(len(lst)):\n                dic[lst[i]] = i\n            return dic\n        @lru_cache(None)\n        def recursion(cur_idx, is_nums1):\n            if is_nums1:\n                if cur_idx >= len(nums1):\n                    return 0\n                res = nums1[cur_idx]\n                # move\n                move = 0\n                if nums1[cur_idx] in hash2:\n                    move = recursion(hash2[nums1[cur_idx]]+1, False)\n                keep = recursion(cur_idx+1, True)\n                return (res + max(move, keep)) \n            else:\n                if cur_idx >= len(nums2):\n                    return 0\n                res = nums2[cur_idx]\n                # move\n                move = 0\n                if nums2[cur_idx] in hash1:\n                    move = recursion(hash1[nums2[cur_idx]]+1, True)\n                keep = recursion(cur_idx+1, False)\n                return (res + max(move, keep))  \n        hash1, hash2 = build(nums1), build(nums2)\n        return max(recursion(0, True), recursion(0, False)) % (10**9 + 7)\n            \n            ",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "get-the-maximum-score",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2619
  },
  {
    "id": 373093933,
    "question_id": 1637,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 10 months",
    "timestamp": 1596006780,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "2288 ms",
    "url": "/submissions/detail/373093933/",
    "is_pending": "Not Pending",
    "title": "String Compression II",
    "memory": "373.2 MB",
    "code": "class Solution:\n    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:\n        @lru_cache(None)\n        def dfs(cur, last, last_count, k):\n            if k < 0:\n                return float('inf')\n            if cur >= len(s):\n                return 0\n            \n            length = 0\n            if s[cur] == last:\n                if last_count == 1 or last_count == 9 or last_count == 99:\n                    length += 1\n                return length + dfs(cur+1, last, last_count+1, k)\n            else:\n                delete = dfs(cur+1, last, last_count, k-1)\n                keep = 1 + dfs(cur+1, s[cur], 1, k)\n                return min(delete, keep)\n        return dfs(0, '', 0, k)\n",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "string-compression-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2618
  },
  {
    "id": 373093014,
    "question_id": 1637,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 10 months",
    "timestamp": 1596006610,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/373093014/",
    "is_pending": "Not Pending",
    "title": "String Compression II",
    "memory": "N/A",
    "code": "class Solution:\n    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:\n        @lru_cache(None)\n        def dfs(cur, last, last_count, k):\n            if cur >= len(s):\n                return 0\n            if k < 0:\n                return float('inf')\n            length = 0\n            if s[cur] == last:\n                if last_count == 1 or last_count == 9 or last_count == 99:\n                    length += 1\n                return length + dfs(cur+1, last, last_count+1, k)\n            else:\n                delete = dfs(cur+1, last, last_count, k-1)\n                keep = 1 + dfs(cur+1, s[cur], 1, k)\n                return min(delete, keep)\n        return dfs(0, '', 1, k)",
    "compare_result": "111100101111010111100101110100110000010010001100011000000100010001110000101111001110000010010011000000000000010011001000000000000010",
    "title_slug": "string-compression-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2617
  },
  {
    "id": 372995882,
    "question_id": 1637,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "4 years, 10 months",
    "timestamp": 1595990470,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "3724 ms",
    "url": "/submissions/detail/372995882/",
    "is_pending": "Not Pending",
    "title": "String Compression II",
    "memory": "13.7 MB",
    "code": "class Solution:\n    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:\n        dp = [[float('inf')] * (len(s)+1) for i in range(k+1)]\n        dp[0][0] = 0\n        for i in range(k+1):\n            for j in range(len(s)+1):\n                if j <= i:\n                    dp[i][j] = 0\n                    continue\n                # delete current\n                if i > 0:\n                    dp[i][j] = dp[i-1][j-1]\n                # keep current\n                cur = 0\n                delete = 0\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n                for v in range(j, 0, -1):\n                    if s[v-1] == s[j-1]:\n                        cur += 1\n                    else:\n                        delete += 1\n                    if delete <= i:\n                        dp[i][j] = min(dp[i][j], dp[i-delete][v-1] + self.cal(cur))\n        return dp[-1][-1]\n\n    def cal(self, cur):\n        if cur == 0:\n            return 0\n        if cur == 1:\n            return 1\n        if cur < 10:\n            return 2\n        if cur < 100:\n            return 3",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "string-compression-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2616
  },
  {
    "id": 354336238,
    "question_id": 86,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592290805,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/354336238/",
    "is_pending": "Not Pending",
    "title": "Partition List",
    "memory": "39.5 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode partition(ListNode head, int x) {\n        ListNode small = new ListNode(0);\n        ListNode smallCurrent = small;\n        ListNode big = new ListNode(0);\n        ListNode bigCurrent = big;\n        while (head != null) {\n            if (head.val < x) {\n                smallCurrent.next = head;\n                smallCurrent = smallCurrent.next;\n            } else {\n                bigCurrent.next = head;\n                bigCurrent = bigCurrent.next;\n            }\n            head = head.next;\n        }\n        smallCurrent.next = big.next;\n        bigCurrent.next = null;\n        return small.next;\n    }\n}",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "partition-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2615
  },
  {
    "id": 354333877,
    "question_id": 82,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592290378,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/354333877/",
    "is_pending": "Not Pending",
    "title": "Remove Duplicates from Sorted List II",
    "memory": "39 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        ListNode dummy = new ListNode(0);\n        ListNode pre = dummy;\n        pre.next = head;\n        while (head != null && head.next != null) {\n            if (head.val == head.next.val) {\n                while (head.next != null && head.val == head.next.val) {\n                    head = head.next;\n                }\n                head = head.next;\n                pre.next = head;\n            } else {\n                pre = pre.next;\n                head = head.next;\n            }\n        }\n        return dummy.next;\n    }\n}",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "remove-duplicates-from-sorted-list-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2614
  },
  {
    "id": 354325145,
    "question_id": 83,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592288750,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/354325145/",
    "is_pending": "Not Pending",
    "title": "Remove Duplicates from Sorted List",
    "memory": "N/A",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        // 1->1->1->2->3\n        ListNode dummy = new ListNode(Integer.MAX_VALUE);\n        ListNode pre = dummy;\n        while (head != null) {\n            if (head.val != pre.val) {\n                pre.next = head;\n                pre = pre.next;\n            } \n            head = head.next;\n        }\n        return dummy.next;\n    }\n}",
    "compare_result": "101101001000111011010100100011000010001101100000000111111101100001000011010111011110010110101101101001111001110101111000001101001100000111000001111010101101100101111",
    "title_slug": "remove-duplicates-from-sorted-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2613
  },
  {
    "id": 354261067,
    "question_id": 138,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592277627,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/354261067/",
    "is_pending": "Not Pending",
    "title": "Copy List with Random Pointer",
    "memory": "38.9 MB",
    "code": "/*\n// Definition for a Node.\nclass Node {\n    int val;\n    Node next;\n    Node random;\n\n    public Node(int val) {\n        this.val = val;\n        this.next = null;\n        this.random = null;\n    }\n}\n*/\n\nclass Solution {\n    public Node copyRandomList(Node head) {\n        HashMap<Node, Node> map = new HashMap();\n        map.put(null, null);\n        Node current = head;\n        while (current != null) {\n            map.put(current, new Node(current.val));\n            current = current.next;\n        }\n        Node newHead = head;\n        current = newHead;\n        while (current != null) {\n            map.get(current).next = map.get(current.next);\n            map.get(current).random = map.get(current.random);\n            current = current.next;\n        }\n        return map.get(head);\n    }\n}",
    "compare_result": "111111111111111111",
    "title_slug": "copy-list-with-random-pointer",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2612
  },
  {
    "id": 353931188,
    "question_id": 61,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592210186,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "1 ms",
    "url": "/submissions/detail/353931188/",
    "is_pending": "Not Pending",
    "title": "Rotate List",
    "memory": "39 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (k == 0 || head == null || head.next == null) {\n            return head;\n        }\n        int length = getLength(head);\n        if (k % length == 0) {\n            return head;\n        }\n        // step = 3\n        int step = length - k % length - 1;\n        ListNode current = head;\n        while (step > 0) {\n            step -= 1;\n            current = current.next;\n        }\n        ListNode next = current.next;\n        current.next = null;\n        ListNode res = next;\n        while (next.next != null) {\n            next = next.next;\n        }\n        \n        next.next = head;\n        return res;\n    }\n    \n    private int getLength(ListNode head) {\n        int count = 0;\n        while (head != null) {\n            count += 1;\n            head = head.next;\n        }\n        return count;\n    }\n}",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "rotate-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2611
  },
  {
    "id": 353930928,
    "question_id": 61,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592210122,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/353930928/",
    "is_pending": "Not Pending",
    "title": "Rotate List",
    "memory": "N/A",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (k == 0 || head == null || head.next == null || k == 1) {\n            return head;\n        }\n        int length = getLength(head);\n        if (length % k == 0) {\n            return head;\n        }\n        // step = 3\n        int step = length - k % length - 1;\n        ListNode current = head;\n        while (step > 0) {\n            step -= 1;\n            current = current.next;\n        }\n        ListNode next = current.next;\n        current.next = null;\n        ListNode res = next;\n        while (next.next != null) {\n            next = next.next;\n        }\n        \n        next.next = head;\n        return res;\n    }\n    \n    private int getLength(ListNode head) {\n        int count = 0;\n        while (head != null) {\n            count += 1;\n            head = head.next;\n        }\n        return count;\n    }\n}",
    "compare_result": "111111110111110111111011111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "title_slug": "rotate-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2610
  },
  {
    "id": 353929181,
    "question_id": 61,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592209718,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/353929181/",
    "is_pending": "Not Pending",
    "title": "Rotate List",
    "memory": "N/A",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (k == 0 || head == null || head.next == null) {\n            return head;\n        }\n        int length = getLength(head);\n        if (length % k == 0) {\n            return head;\n        }\n        // step = 3\n        int step = length - k % length;\n        ListNode current = head;\n        while (step > 1) {\n            step -= 1;\n            current = current.next;\n        }\n        ListNode next = current.next;\n        current.next = null;\n        ListNode res = next;\n        while (next.next != null) {\n            next = next.next;\n        }\n        next.next = head;\n        return res;\n    }\n    \n    private int getLength(ListNode head) {\n        int count = 0;\n        while (head != null) {\n            count += 1;\n            head = head.next;\n        }\n        return count;\n    }\n}",
    "compare_result": "111111110111110111111011111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "title_slug": "rotate-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2609
  },
  {
    "id": 353929052,
    "question_id": 61,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592209689,
    "status": 15,
    "status_display": "Runtime Error",
    "runtime": "N/A",
    "url": "/submissions/detail/353929052/",
    "is_pending": "Not Pending",
    "title": "Rotate List",
    "memory": "N/A",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (k == 0 || head == null || head.next == null) {\n            return head;\n        }\n        int length = getLength(head);\n        if (length == k) {\n            return head;\n        }\n        // step = 3\n        int step = length - k % length;\n        ListNode current = head;\n        while (step > 1) {\n            step -= 1;\n            current = current.next;\n        }\n        ListNode next = current.next;\n        current.next = null;\n        ListNode res = next;\n        while (next.next != null) {\n            next = next.next;\n        }\n        next.next = head;\n        return res;\n    }\n    \n    private int getLength(ListNode head) {\n        int count = 0;\n        while (head != null) {\n            count += 1;\n            head = head.next;\n        }\n        return count;\n    }\n}",
    "compare_result": "111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "title_slug": "rotate-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2608
  },
  {
    "id": 353928901,
    "question_id": 61,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592209657,
    "status": 20,
    "status_display": "Compile Error",
    "runtime": "N/A",
    "url": "/submissions/detail/353928901/",
    "is_pending": "Not Pending",
    "title": "Rotate List",
    "memory": "N/A",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (k == 0 || head == null || head.next == null) {\n            return head;\n        }\n        int length = getLength(head);\n        if (leagth == k) {\n            return head;\n        }\n        // step = 3\n        int step = length - k % length;\n        ListNode current = head;\n        while (step > 1) {\n            step -= 1;\n            current = current.next;\n        }\n        ListNode next = current.next;\n        current.next = null;\n        ListNode res = next;\n        while (next.next != null) {\n            next = next.next;\n        }\n        next.next = head;\n        return res;\n    }\n    \n    private int getLength(ListNode head) {\n        int count = 0;\n        while (head != null) {\n            count += 1;\n            head = head.next;\n        }\n        return count;\n    }\n}",
    "compare_result": null,
    "title_slug": "rotate-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2607
  },
  {
    "id": 353928583,
    "question_id": 61,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592209581,
    "status": 15,
    "status_display": "Runtime Error",
    "runtime": "N/A",
    "url": "/submissions/detail/353928583/",
    "is_pending": "Not Pending",
    "title": "Rotate List",
    "memory": "N/A",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (k == 0 || head == null || head.next == null) {\n            return head;\n        }\n        int length = getLength(head);\n        // step = 3\n        int step = length - k % length;\n        ListNode current = head;\n        while (step > 1) {\n            step -= 1;\n            current = current.next;\n        }\n        ListNode next = current.next;\n        current.next = null;\n        ListNode res = next;\n        while (next.next != null) {\n            next = next.next;\n        }\n        next.next = head;\n        return res;\n    }\n    \n    private int getLength(ListNode head) {\n        int count = 0;\n        while (head != null) {\n            count += 1;\n            head = head.next;\n        }\n        return count;\n    }\n}",
    "compare_result": "111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "title_slug": "rotate-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2606
  },
  {
    "id": 353928364,
    "question_id": 61,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592209524,
    "status": 15,
    "status_display": "Runtime Error",
    "runtime": "N/A",
    "url": "/submissions/detail/353928364/",
    "is_pending": "Not Pending",
    "title": "Rotate List",
    "memory": "N/A",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        int length = getLength(head);\n        // step = 3\n        int step = length - k % length;\n        ListNode current = head;\n        while (step > 1) {\n            step -= 1;\n            current = current.next;\n        }\n        ListNode next = current.next;\n        current.next = null;\n        ListNode res = next;\n        while (next.next != null) {\n            next = next.next;\n        }\n        next.next = head;\n        return res;\n    }\n    \n    private int getLength(ListNode head) {\n        int count = 0;\n        while (head != null) {\n            count += 1;\n            head = head.next;\n        }\n        return count;\n    }\n}",
    "compare_result": "110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "title_slug": "rotate-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2605
  },
  {
    "id": 353919167,
    "question_id": 25,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592207606,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/353919167/",
    "is_pending": "Not Pending",
    "title": "Reverse Nodes in k-Group",
    "memory": "43.3 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        // 1->2->3->4->5\n        int count = 1;\n        // current = 1\n        ListNode current = head;\n        // \n        while (count < k && current != null) {\n            // count = 2\n            count += 1;\n            // current = 2\n            current = current.next;\n        }\n        if (count == k && current != null) {\n            // pre = 0\n            ListNode pre = new ListNode(0);\n            // pre.next = reverseGroup(5, 2)\n            pre.next = reverseKGroup(current.next, k);\n            for (int i=0; i<k; i++) {\n                ListNode next = head.next;\n                head.next = pre.next;\n                pre.next = head;\n                head = next;\n            }\n            return pre.next;\n        } else {\n            return head;\n        }\n    }\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "reverse-nodes-in-k-group",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2604
  },
  {
    "id": 353917288,
    "question_id": 23,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592207235,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "7 ms",
    "url": "/submissions/detail/353917288/",
    "is_pending": "Not Pending",
    "title": "Merge k Sorted Lists",
    "memory": "45.8 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        int length = lists.length;\n        if (length == 0) {\n            return null;\n        } else if (length == 1) {\n            return lists[0];\n        }\n        ListNode left = mergeKLists(Arrays.copyOfRange(lists,0,length/2));\n        ListNode right = mergeKLists(Arrays.copyOfRange(lists,length/2, length));\n        return merge(left, right);\n    }\n    \n    private ListNode merge(ListNode left, ListNode right) {\n        ListNode current = new ListNode(0);\n        ListNode dummy = current;\n        while (left != null || right != null) {\n            if (left == null) {\n                current.next = right;\n                break;\n            }\n            if (right == null) {\n                current.next = left;\n                break;\n            }\n            if (left.val < right.val) {\n                current.next = left;\n                current = current.next;\n                left = left.next;\n            } else {\n                current.next = right;\n                current = current.next;\n                right = right.next;\n            }\n        }\n        return dummy.next;\n    }\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "merge-k-sorted-lists",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2603
  },
  {
    "id": 353863123,
    "question_id": 147,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592198023,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "29 ms",
    "url": "/submissions/detail/353863123/",
    "is_pending": "Not Pending",
    "title": "Insertion Sort List",
    "memory": "41.7 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode dummy = new ListNode(0);\n        ListNode toSorted = head;\n        while (toSorted != null) {\n            ListNode pre = dummy;\n            ListNode current = dummy.next;           \n            while (current != null && current.val < toSorted.val) {\n                pre = current;\n                current = current.next;\n            }\n            ListNode next = toSorted.next;\n            toSorted.next = current;\n            pre.next = toSorted;\n            toSorted = next;\n        }\n        return dummy.next;\n    }\n}",
    "compare_result": "1111111111111111111111",
    "title_slug": "insertion-sort-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2602
  },
  {
    "id": 353862916,
    "question_id": 147,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592197987,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "30 ms",
    "url": "/submissions/detail/353862916/",
    "is_pending": "Not Pending",
    "title": "Insertion Sort List",
    "memory": "39.2 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode dummy = new ListNode(0);\n        ListNode toSorted = head;\n        // 4->2->1->3\n        while (toSorted != null) {\n            // 4\n            ListNode pre = dummy;\n            // null\n            ListNode current = dummy.next;\n            \n            while (current != null && current.val < toSorted.val) {\n                pre = current;\n                current = current.next;\n            }\n            ListNode next = toSorted.next;\n            toSorted.next = current;\n            pre.next = toSorted;\n            toSorted = next;\n        }\n        return dummy.next;\n    }\n}",
    "compare_result": "1111111111111111111111",
    "title_slug": "insertion-sort-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2601
  },
  {
    "id": 353860946,
    "question_id": 147,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592197648,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "28 ms",
    "url": "/submissions/detail/353860946/",
    "is_pending": "Not Pending",
    "title": "Insertion Sort List",
    "memory": "42.2 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode dummy = new ListNode(0);\n        ListNode toSorted = head;\n        // 4->2->1->3\n        while (toSorted != null) {\n            // 4\n            ListNode pre = dummy;\n            // null\n            ListNode current = dummy.next;\n            \n            if (current == null) {\n                // next = 2\n                ListNode next = toSorted.next;\n                // 4 -> null\n                toSorted.next = null;\n                // 0 -> 4\n                pre.next = toSorted;\n                toSorted = next;\n            } else {\n                while (current != null && current.val < toSorted.val) {\n                    pre = current;\n                    current = current.next;\n                }\n                ListNode next = toSorted.next;\n                toSorted.next = current;\n                pre.next = toSorted;\n                toSorted = next;\n            }\n        }\n        return dummy.next;\n    }\n}",
    "compare_result": "1111111111111111111111",
    "title_slug": "insertion-sort-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2600
  },
  {
    "id": 353837656,
    "question_id": 147,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592193476,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "23 ms",
    "url": "/submissions/detail/353837656/",
    "is_pending": "Not Pending",
    "title": "Insertion Sort List",
    "memory": "42.5 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        // [-1,5,3,4,0]\n        // 0 -> -1\n        ListNode pre = new ListNode(0);\n        pre.next = new ListNode(head.val);\n        // head = 5\n        head = head.next;\n        while (head != null) {\n            insertList(head.val, pre);\n            head = head.next;\n        }\n        return pre.next;\n    }\n    \n    private void insertList(int val, ListNode pre) {\n        // 5  0->-1\n        while (pre != null && pre.next != null) {\n            if (val < pre.next.val) {\n                // next = null\n                ListNode next = pre.next;\n                // pre.next = 2\n                pre.next = new ListNode(val);\n                // 2 -> 4\n                pre.next.next = next;\n                return;\n            } else {\n                pre = pre.next;\n            }\n        }\n        pre.next = new ListNode(val);\n    }\n}\n\n\n",
    "compare_result": "1111111111111111111111",
    "title_slug": "insertion-sort-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2599
  },
  {
    "id": 353836901,
    "question_id": 147,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592193339,
    "status": 15,
    "status_display": "Runtime Error",
    "runtime": "N/A",
    "url": "/submissions/detail/353836901/",
    "is_pending": "Not Pending",
    "title": "Insertion Sort List",
    "memory": "N/A",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        ListNode pre = new ListNode(0);\n        pre.next = new ListNode(head.val);\n        head = head.next;\n        while (head != null) {\n            insertList(head.val, pre);\n            head = head.next;\n        }\n        return pre.next;\n    }\n    \n    private void insertList(int val, ListNode pre) {\n        // 2 4\n        while (pre != null) {\n            if (val < pre.next.val) {\n                // next = null\n                ListNode next = pre.next;\n                // pre.next = 2\n                pre.next = new ListNode(val);\n                // 2 -> 4\n                pre.next.next = next;\n                return;\n            } else {\n                pre = pre.next;\n            }\n        }\n        pre.next = new ListNode(val);\n    }\n}\n\n\n",
    "compare_result": "1000000000000000000000",
    "title_slug": "insertion-sort-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2598
  },
  {
    "id": 353817143,
    "question_id": 19,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592189891,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "1 ms",
    "url": "/submissions/detail/353817143/",
    "is_pending": "Not Pending",
    "title": "Remove Nth Node From End of List",
    "memory": "38 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy;\n        ListNode pre = new ListNode(0);\n        pre.next = head;\n        dummy = pre;\n        ListNode next = head;\n        while (n > 1) {\n            n -= 1;\n            next = next.next;\n        }\n        while (next.next != null) {\n            pre = head;\n            head = head.next;\n            next = next.next;\n            \n        }\n        pre.next = head.next;\n        return dummy.next;\n    }\n}",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "remove-nth-node-from-end-of-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2597
  },
  {
    "id": 353812225,
    "question_id": 19,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592189042,
    "status": 15,
    "status_display": "Runtime Error",
    "runtime": "N/A",
    "url": "/submissions/detail/353812225/",
    "is_pending": "Not Pending",
    "title": "Remove Nth Node From End of List",
    "memory": "N/A",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy = head;\n        ListNode next = head;\n        while (n > 0) {\n            n -= 1;\n            next = next.next;\n        }\n        while (next.next != null) {\n            head = head.next;\n            next = next.next;\n        }\n        ListNode new_next = head.next.next;\n        head.next = new_next;\n        return dummy;\n    }\n}\n",
    "compare_result": "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "title_slug": "remove-nth-node-from-end-of-list",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2596
  },
  {
    "id": 353802772,
    "question_id": 21,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592187321,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "1 ms",
    "url": "/submissions/detail/353802772/",
    "is_pending": "Not Pending",
    "title": "Merge Two Sorted Lists",
    "memory": "40.2 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n      if (l1 == null) {\n          return l2;\n      }   \n      if (l2 == null) {\n          return l1;\n      }\n      ListNode current = new ListNode(0);\n      if (l1.val > l2.val) {\n          current = l2;\n          l2 = l2.next;\n      } else {\n          current = l1;\n          l1 = l1.next;\n      }\n      current.next = mergeTwoLists(l1, l2);\n      return current;\n    }\n}",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "merge-two-sorted-lists",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2595
  },
  {
    "id": 353799967,
    "question_id": 21,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1592186818,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "1 ms",
    "url": "/submissions/detail/353799967/",
    "is_pending": "Not Pending",
    "title": "Merge Two Sorted Lists",
    "memory": "40.6 MB",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode current = new ListNode(0);\n        ListNode dummy = current;\n        while (l1 != null || l2 != null) {\n            if (l1 == null) {\n                current.next = l2;\n                break;\n            }\n            if (l2 == null) {\n                current.next = l1;\n                break;\n            }\n            if (l1.val > l2.val) {\n                current.next = l2;\n                current = current.next;\n                l2 = l2.next;\n            } else {\n                current.next = l1;\n                current = current.next;\n                l1 = l1.next;\n            }\n        }\n        return dummy.next;\n    }\n}\n",
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "merge-two-sorted-lists",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2594
  },
  {
    "id": 352078190,
    "question_id": 121,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "5 years",
    "timestamp": 1591852420,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "80 ms",
    "url": "/submissions/detail/352078190/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock",
    "memory": "16.7 MB",
    "code": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        dp = [[0]*2 for i in range(len(prices))]\n        dp[0][0] = 0\n        dp[0][1] = -prices[0]\n        for i in range(1, len(prices)):\n            dp[i][1] = max(dp[i-1][1], -prices[i])\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n        return dp[-1][0]",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "best-time-to-buy-and-sell-stock",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2593
  },
  {
    "id": 352075679,
    "question_id": 122,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "5 years",
    "timestamp": 1591852010,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "72 ms",
    "url": "/submissions/detail/352075679/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock II",
    "memory": "15.2 MB",
    "code": "class Solution:\n    def maxProfit(self, prices):\n        if not prices:\n            return 0\n        dp = [[0] * len(prices) for i in range(2)]\n        dp[1][0] = -prices[0]\n        for i in range(1, len(prices)):\n            dp[0][i] = max(dp[0][i-1], dp[1][i-1] + prices[i])\n            dp[1][i] = max(dp[1][i-1], dp[0][i-1] - prices[i])\n        return dp[0][-1]\n",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "best-time-to-buy-and-sell-stock-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2592
  },
  {
    "id": 351658773,
    "question_id": 376,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591777011,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "8 ms",
    "url": "/submissions/detail/351658773/",
    "is_pending": "Not Pending",
    "title": "Wiggle Subsequence",
    "memory": "38.8 MB",
    "code": "class Solution {\n    public int wiggleMaxLength(int[] nums) {\n        int length = nums.length;\n        if (length < 2) {\n            return length;\n        }\n        int[] positive = new int[length];\n        int[] negative = new int[length];\n        // nums = [1,4,9,2]\n        // p = [1,1,1,1]\n        // n = [1,1,1,1]\n        Arrays.fill(positive, 1);\n        Arrays.fill(negative, 1);\n        // \n        for (int i=1; i<length; i++) {\n            for (int j=0; j<i; j++) {\n                // 2 > 1\n                if (nums[i] > nums[j]) {\n                    // position[1] = 2\n                    // [1,2,1,1]\n                    // \n                    positive[i] = Math.max(positive[i], 1 + negative[j]);\n                } else if (nums[i] < nums[j]) {\n                    negative[i] = Math.max(negative[i], 1 + positive[j]);\n                }\n            }\n        }\n        return Math.max(positive[length-1], negative[length-1]);\n        \n        \n    }\n}",
    "compare_result": "111111111111111111111111111",
    "title_slug": "wiggle-subsequence",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2591
  },
  {
    "id": 351636102,
    "question_id": 123,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591773543,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "2 ms",
    "url": "/submissions/detail/351636102/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock III",
    "memory": "41.9 MB",
    "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        int length = prices.length;\n        if (length < 2) {\n            return 0;\n        }\n        int[] dp = new int[length+1];\n        for (int k=1; k<3; k++) {\n            int[] old = dp.clone();\n            int current_min = Integer.MAX_VALUE;\n            for (int i=2; i<length+1; i++) {\n                current_min = Math.min(current_min, prices[i-2] - old[i-2]);\n                dp[i] = Math.max(dp[i-1], prices[i-1] - current_min);\n            }\n        }\n        return dp[length];\n    }\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "best-time-to-buy-and-sell-stock-iii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2590
  },
  {
    "id": 351635922,
    "question_id": 123,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591773514,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "4 ms",
    "url": "/submissions/detail/351635922/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock III",
    "memory": "39.2 MB",
    "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        int length = prices.length;\n        if (length < 2) {\n            return 0;\n        }\n        int[] dp = new int[length+1];\n        for (int k=1; k<3; k++) {\n            int[] old = dp.clone();\n            int current_min = Integer.MAX_VALUE;\n            for (int i=2; i<length+1; i++) {\n                current_min = Math.min(current_min, prices[i-2] - old[i-2]);\n                dp[i] = Math.max(dp[i-1], Math.max(dp[i], prices[i-1] - current_min));\n            }\n        }\n        return dp[length];\n    }\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "best-time-to-buy-and-sell-stock-iii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2589
  },
  {
    "id": 351635693,
    "question_id": 123,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591773480,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "1634 ms",
    "url": "/submissions/detail/351635693/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock III",
    "memory": "42.2 MB",
    "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        int length = prices.length;\n        if (length < 2) {\n            return 0;\n        }\n        int[] dp = new int[length+1];\n        for (int k=1; k<3; k++) {\n            int[] old = dp.clone();\n            int current_min = Integer.MAX_VALUE;\n            for (int i=2; i<length+1; i++) {\n                current_min = Math.min(current_min, prices[i-2] - old[i-2]);\n                for (int j=0; j<i-1; j++) {\n                    dp[i] = Math.max(dp[i-1], Math.max(dp[i], prices[i-1] - current_min));\n                }\n            }\n        }\n        return dp[length];\n    }\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "best-time-to-buy-and-sell-stock-iii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2588
  },
  {
    "id": 351634106,
    "question_id": 123,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591773254,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "2246 ms",
    "url": "/submissions/detail/351634106/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock III",
    "memory": "39.4 MB",
    "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        int length = prices.length;\n        if (length < 2) {\n            return 0;\n        }\n        int[] dp = new int[length+1];\n        for (int k=1; k<3; k++) {\n            int[] old = dp.clone();\n            for (int i=2; i<length+1; i++) {\n                // current_min = Integer.Max;\n                for (int j=0; j<i-1; j++) {\n                    dp[i] = Math.max(dp[i-1], Math.max(dp[i], prices[i-1] - prices[j] + old[j]));\n                }\n            }\n            System.out.println(Arrays.toString(dp));\n        }\n        return dp[length];\n    }\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "best-time-to-buy-and-sell-stock-iii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2587
  },
  {
    "id": 351598772,
    "question_id": 123,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591767733,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/351598772/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock III",
    "memory": "N/A",
    "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        if(prices == null || prices.length == 0) return 0;\n        int totalK = 2;\n        int[][] dp = new int[totalK+1][prices.length];\n        for(int k = 1;k<=totalK;k++){//profit = 0 when k = 0\n            for(int i = 1;i< prices.length;i++){\n                int maxProfitSellOnDayI = prices[0];\n                for(int j = 1;j<=i;j++){//buy on day j, sell on day i\n                    maxProfitSellOnDayI = Math.min(maxProfitSellOnDayI, prices[j] - dp[k-1][j-1]);\n                }\n                dp[k][i] = Math.max(dp[k][i], prices[i] - maxProfitSellOnDayI);//sell on day i OR not\n            }\n        }\n        return dp[totalK][prices.length-1];\n    }\n}",
    "compare_result": "11111111111111111010000111111011111011111011111111111010111010001010000011111010111010001010000011111011111010001010000011111011111011111010000011111011111011111011111101000001010000000000010100001000",
    "title_slug": "best-time-to-buy-and-sell-stock-iii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2586
  },
  {
    "id": 351598529,
    "question_id": 123,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591767689,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "1840 ms",
    "url": "/submissions/detail/351598529/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock III",
    "memory": "42.2 MB",
    "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        if(prices == null || prices.length == 0) return 0;\n        int totalK = 2;\n        int[][] dp = new int[totalK+1][prices.length];\n        for(int k = 1;k<=totalK;k++){//profit = 0 when k = 0\n            for(int i = 1;i< prices.length;i++){\n                int maxProfitSellOnDayI = prices[0];\n                for(int j = 1;j<=i;j++){//buy on day j, sell on day i\n                    maxProfitSellOnDayI = Math.min(maxProfitSellOnDayI, prices[j] - dp[k-1][j-1]);\n                }\n                dp[k][i] = Math.max(dp[k][i-1], prices[i] - maxProfitSellOnDayI);//sell on day i OR not\n            }\n        }\n        return dp[totalK][prices.length-1];\n    }\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "best-time-to-buy-and-sell-stock-iii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2585
  },
  {
    "id": 351591885,
    "question_id": 123,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591766651,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "4 ms",
    "url": "/submissions/detail/351591885/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock III",
    "memory": "39.4 MB",
    "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        int length = prices.length;\n        if (length < 2) {\n            return 0;\n        }\n        // [1,2,3,4,5]\n        // [0,0,0,0,0,0]\n        int[] dp = new int[length+1];\n        for (int k=1; k<3; k++) {\n            int current_min = prices[0];\n            int[] old = dp.clone();\n            for (int i=2; i<length+1; i++) {\n                current_min = Math.min(current_min, prices[i-2]-old[i-2]);\n                dp[i] = Math.max(dp[i-1], prices[i-1]-current_min);\n            }\n        }\n        return dp[length];\n    }\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "best-time-to-buy-and-sell-stock-iii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2584
  },
  {
    "id": 351584864,
    "question_id": 123,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591765531,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "2477 ms",
    "url": "/submissions/detail/351584864/",
    "is_pending": "Not Pending",
    "title": "Best Time to Buy and Sell Stock III",
    "memory": "41.7 MB",
    "code": "class Solution {\n    public int maxProfit(int[] prices) {\n        int length = prices.length;\n        if (length < 2) {\n            return 0;\n        }\n        // [1,2,3,4,5]\n        // [0,0,0,0,0,0]\n        int[] dp = new int[length+1];\n        for (int k=1; k<3; k++) {\n            int[] old = dp.clone();\n            for (int i=1; i<length+1; i++) {\n                for (int j=1; j<i; j++) {\n                    dp[i] = Math.max(dp[i], Math.max(dp[i-1], old[j-1]+prices[i-1]-prices[j-1]));\n                }\n            }\n        }\n        return dp[length];\n    }\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "best-time-to-buy-and-sell-stock-iii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2583
  },
  {
    "id": 351551965,
    "question_id": 213,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591760662,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/351551965/",
    "is_pending": "Not Pending",
    "title": "House Robber II",
    "memory": "37.1 MB",
    "code": "class Solution {\n    public int rob(int[] nums) {\n    int length = nums.length;\n    if (length == 0) return 0;\n    if (length == 1) return nums[0];\n    if (length == 2) return Math.max(nums[0], nums[1]);\n    if (nums[1] > nums[0] + nums[2]) {\n        return rob(nums, 1, length-1);\n    }\n    if (nums[length-2] > nums[length-3] + nums[length-1]) {\n        return rob(nums, 0, length-2);\n    }\n    return Math.max(rob(nums, 0, length-2), rob(nums, 1, length-1));\n}\n\nprivate int rob(int[] num, int lo, int hi) {\n    int include = 0, exclude = 0;\n    for (int j = lo; j <= hi; j++) {\n        int i = include, e = exclude;\n        include = e + num[j];\n        exclude = Math.max(e, i);\n    }\n    return Math.max(include, exclude);\n}\n\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "house-robber-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2582
  },
  {
    "id": 351551489,
    "question_id": 213,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591760594,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/351551489/",
    "is_pending": "Not Pending",
    "title": "House Robber II",
    "memory": "38.5 MB",
    "code": "class Solution {\n    public int rob(int[] nums) {\n    if (nums.length == 0) return 0;\n    if (nums.length == 1) return nums[0];\n    if (nums.length == 2) return Math.max(nums[0], nums[1]);\n    if (nums[1] > nums[0] + nums[2]) {\n        return rob(nums, 1, nums.length-1);\n    }\n    if (nums[nums.length-2] > nums[nums.length-3] + nums[nums.length-1]) {\n        return rob(nums, 0, nums.length-2);\n    }\n    return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1));\n}\n\nprivate int rob(int[] num, int lo, int hi) {\n    int include = 0, exclude = 0;\n    for (int j = lo; j <= hi; j++) {\n        int i = include, e = exclude;\n        include = e + num[j];\n        exclude = Math.max(e, i);\n    }\n    return Math.max(include, exclude);\n}\n\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "house-robber-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2581
  },
  {
    "id": 351551257,
    "question_id": 213,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591760562,
    "status": 15,
    "status_display": "Runtime Error",
    "runtime": "N/A",
    "url": "/submissions/detail/351551257/",
    "is_pending": "Not Pending",
    "title": "House Robber II",
    "memory": "N/A",
    "code": "class Solution {\n    public int rob(int[] nums) {\n    if (nums.length == 1) return nums[0];\n    if (nums.length == 2) return Math.max(nums[0], nums[1]);\n    if (nums[1] > nums[0] + nums[2]) {\n        return rob(nums, 1, nums.length-1);\n    }\n    if (nums[nums.length-2] > nums[nums.length-3] + nums[nums.length-1]) {\n        return rob(nums, 0, nums.length-2);\n    }\n    return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1));\n}\n\nprivate int rob(int[] num, int lo, int hi) {\n    int include = 0, exclude = 0;\n    for (int j = lo; j <= hi; j++) {\n        int i = include, e = exclude;\n        include = e + num[j];\n        exclude = Math.max(e, i);\n    }\n    return Math.max(include, exclude);\n}\n\n}",
    "compare_result": "11000000000000000000000000000000000000000000000000000000000000000000000000",
    "title_slug": "house-robber-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2580
  },
  {
    "id": 351550034,
    "question_id": 213,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591760386,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/351550034/",
    "is_pending": "Not Pending",
    "title": "House Robber II",
    "memory": "38.9 MB",
    "code": "class Solution {\n    public int rob(int[] nums) {\n    if (nums.length == 1) return nums[0];\n    return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1));\n}\n\nprivate int rob(int[] num, int lo, int hi) {\n    int include = 0, exclude = 0;\n    for (int j = lo; j <= hi; j++) {\n        int i = include, e = exclude;\n        include = e + num[j];\n        exclude = Math.max(e, i);\n    }\n    return Math.max(include, exclude);\n}\n\n}",
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "house-robber-ii",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2579
  },
  {
    "id": 351516854,
    "question_id": 198,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591755176,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/351516854/",
    "is_pending": "Not Pending",
    "title": "House Robber",
    "memory": "38.6 MB",
    "code": "class Solution {\n    public int rob(int[] nums) {\n        int length = nums.length;\n        int[] path = new int[length+1];\n        if (length == 0) {\n            return 0;\n        } \n        int[] dp = new int[length+1];\n        dp[0] = 0;\n        dp[1] = nums[0];\n        for (int i=2; i<length+1; i++) {\n            dp[i] = Math.max(dp[i-1], dp[i-2] + nums[i-1]);\n        }\n        return dp[length];\n    }\n}",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "house-robber",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2578
  },
  {
    "id": 351515137,
    "question_id": 198,
    "lang": "java",
    "lang_name": "Java",
    "time": "5 years",
    "timestamp": 1591754867,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "0 ms",
    "url": "/submissions/detail/351515137/",
    "is_pending": "Not Pending",
    "title": "House Robber",
    "memory": "36.4 MB",
    "code": "class Solution {\n    public int rob(int[] nums) {\n        int length = nums.length;\n        if (length == 0) {\n            return 0;\n        } else if (length == 1) {\n            return nums[0];\n        } else if (length < 3) {\n            return Math.max(nums[0], nums[1]);\n        } \n        int[] dp = new int[length];\n        dp[0] = nums[0];\n        dp[1] = Math.max(nums[0], nums[1]);\n        for (int i=2; i<length; i++) {\n            dp[i] = Math.max(dp[i-1], dp[i-2] + nums[i]);\n        }\n        return dp[length-1];\n    }\n}",
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111",
    "title_slug": "house-robber",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2577
  },
  {
    "id": 351033747,
    "question_id": 1042,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "5 years",
    "timestamp": 1591670181,
    "status": 14,
    "status_display": "Time Limit Exceeded",
    "runtime": "N/A",
    "url": "/submissions/detail/351033747/",
    "is_pending": "Not Pending",
    "title": "Minimum Cost to Merge Stones",
    "memory": "N/A",
    "code": "class Solution:\n    def mergeStones(self, stones: List[int], K: int) -> int:\n        length = len(stones)\n        if length == 1:\n            return 0\n        if (length-1) % (K-1) != 0:\n            return -1\n        return self.recursion(stones, K)\n    \n    def recursion(self, stones, K):\n        length = len(stones)\n        if length == K:\n            return sum(stones)\n        if (length-1) % (K-1) != 0:\n            return float('inf')        \n        res = float('inf')\n        for i in range(length-K+1):\n            current_sum = sum(stones[i:i+K])\n            res = min(res, self.recursion(stones[:i] + [current_sum] + stones[i+K:], K) + current_sum)\n        return res",
    "compare_result": "11111111111111111111111111111000000000000000000000000000000000000000000000000000000",
    "title_slug": "minimum-cost-to-merge-stones",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2576
  },
  {
    "id": 351033070,
    "question_id": 1042,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "5 years",
    "timestamp": 1591670080,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/351033070/",
    "is_pending": "Not Pending",
    "title": "Minimum Cost to Merge Stones",
    "memory": "N/A",
    "code": "class Solution:\n    def mergeStones(self, stones: List[int], K: int) -> int:\n        length = len(stones)\n        if length == 1:\n            return sum(stones)\n        if (length-1) % (K-1) != 0:\n            return -1\n        return self.recursion(stones, K)\n    \n    def recursion(self, stones, K):\n        length = len(stones)\n        if length == K:\n            return sum(stones)\n        if (length-1) % (K-1) != 0:\n            return float('inf')        \n        res = float('inf')\n        for i in range(length-K+1):\n            current_sum = sum(stones[i:i+K])\n            res = min(res, self.recursion(stones[:i] + [current_sum] + stones[i+K:], K) + current_sum)\n        return res",
    "compare_result": "11101111111111111111111111111000000000000000000000000000000000000000000000000000000",
    "title_slug": "minimum-cost-to-merge-stones",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2575
  },
  {
    "id": 347470499,
    "question_id": 1042,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "5 years",
    "timestamp": 1590994917,
    "status": 11,
    "status_display": "Wrong Answer",
    "runtime": "N/A",
    "url": "/submissions/detail/347470499/",
    "is_pending": "Not Pending",
    "title": "Minimum Cost to Merge Stones",
    "memory": "N/A",
    "code": "class Solution:\n    def mergeStones(self, stones: List[int], K: int) -> int:\n        # [3,2,4,1]\n        # 2\n        # 4\n        L = len(stones)\n        if L == 1:\n            return 0\n        elif K == L:\n            return sum(stones)\n        elif K > L or not self.valid(L, K):\n            return -1\n        self.dic = dict()\n        return self.recursion(stones, K, 0)\n    \n    def recursion(self, stones, K, cost):\n        if tuple(stones) in self.dic:\n            return self.dic[tuple(stones)]\n        # 4\n        L = len(stones)\n        if L == 1:\n            return cost\n        res = float('inf')\n        # i = [0, 2]\n        for i in range(L-K+1):\n            current_sum = sum(stones[i:i+K])\n            res = min(\n                res, self.recursion(stones[:i] + [current_sum] + stones[i+K:], K, cost + current_sum))\n        self.dic[tuple(stones)] = res\n        return res\n    \n    def valid(self, L, K):\n        while L != 1:\n            L -= K\n            if L < 0:\n                return False\n            L += 1\n        return True\n        \n            ",
    "compare_result": "11111111111111111010101011101011111110101110110011111000000000000000000000000000000",
    "title_slug": "minimum-cost-to-merge-stones",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2574
  },
  {
    "id": 347416214,
    "question_id": 836,
    "lang": "python3",
    "lang_name": "Python3",
    "time": "5 years",
    "timestamp": 1590984521,
    "status": 10,
    "status_display": "Accepted",
    "runtime": "48 ms",
    "url": "/submissions/detail/347416214/",
    "is_pending": "Not Pending",
    "title": "Race Car",
    "memory": "13.8 MB",
    "code": "import math\nfrom math import log2\n\nclass Solution:\n    def racecar(self, target: int) -> int:\n        self.base_case(10000)\n        return self.recursion(target)\n\n    def base_case(self, maximum):\n        self.dic = dict()\n        max_bit_length = math.floor(log2(maximum)) + 1\n        for i in range(max_bit_length+1):\n            # 0 -> 0\n            # 1 -> 1\n            self.dic[2**i-1] = i\n\n    def recursion(self, target):\n        if target in self.dic:\n            return self.dic[target]\n        n = math.floor(log2(target)) + 1\n        # n = 3\n        # 3 + 1\n        res = n + 1 + self.recursion(2**n-1-target)\n        # m = [0, 2]\n        for m in range(n-1):\n            if m + n + 1 < res:\n                res = min(res, n + m + 1 + self.recursion(target+2**m-2**(n-1)))\n        self.dic[target] = res\n        return res",
    "compare_result": "11111111111111111111111111111111111111111111111111111",
    "title_slug": "race-car",
    "has_notes": false,
    "flag_type": 1,
    "frontend_id": 2573
  }
]
